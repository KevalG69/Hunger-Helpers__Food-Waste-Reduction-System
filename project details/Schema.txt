const mongoose = require("mongoose");

// USERS SCHEMA
const userSchema = new mongoose.Schema({
  verified: { type: Boolean, default: false },
  nickName: { type: String },
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  age: { type: Number },
  email: { type: String, required: true, unique: true },
  mobile: { type: String, required: true, unique: true },
  state: { type: String, required: true },
  city: { type: String, required: true },
  locality: { type: String, required: true },
  role: { type: String, enum: ["Donor", "NGO", "Volunteer"], required: true },
  profilePhoto: { type: String },
  password: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  contribution_Info: { type: mongoose.Schema.Types.ObjectId, ref: "ContributionInfo" },
  donations: [{ type: mongoose.Schema.Types.ObjectId, ref: "DonationBox" }],
  notifications: [{ type: mongoose.Schema.Types.ObjectId, ref: "Notification" }],
});
rolePermissions: {
  type: Map,
  of: Boolean,
  default: {
    canCreateDonation: false,
    canClaimDonation: false,
    canDeleteDonation: false,
    canManageUsers: false,
    canViewAnalytics: false
  }
}

// CONTRIBUTION INFO SCHEMA
const contributionInfoSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  score: { type: Number, default: 0 },
  badge: [{ type: String }],
  donation_Count: { type: Number, default: 0 },
  delivery_Count: { type: Number, default: 0 },
  last_contribution: { type: Date },
});

// DONATION BOX SCHEMA
const donationBoxSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  volunteer_id: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  status: { type: String, enum: ["Pending", "Accepted", "Completed", "Cancelled"], required: true },
  food_image: { type: String },
  food_Name: { type: String, required: true },
  food_Type: { type: String, enum: ["Veg", "Non-Veg"], required: true },
  food_quantity: { type: String, required: true },
  food_CookedAt: { type: Date, required: true },
  food_ExpireAt: { type: Date, required: true },
  pickup_location: { type: String, required: true },
  location: {
    lat: { type: Number, required: true },
    lng: { type: Number, required: true },
  },
  pickup_time: { type: Date, required: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

// EXPORT MODELS
const User = mongoose.model("User", userSchema);
const ContributionInfo = mongoose.model("ContributionInfo", contributionInfoSchema);
const DonationBox = mongoose.model("DonationBox", donationBoxSchema);

module.exports = { User, ContributionInfo, DonationBox };


const notificationSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // Reference to User
  type: {
    type: String,
    enum: ["Donation Update", "Reminder", "Achievement"], // Notification types
    required: true,
  },
  message: { type: String, required: true },
  read_status: { type: Boolean, default: false }, // Notification read status
  createdAt: { type: Date, default: Date.now },
});

// Model
const Notification = mongoose.model("Notification", notificationSchema);

const donationDataSchema = new mongoose.Schema({
  date: { type: Date, required: true }, // Date of the donation
  total_meals_served: { type: Number, required: true }, // Analytics data
  total_donors: { type: Number, required: true },
  total_volunteers: { type: Number, required: true },
  total_food_wasted: { type: Number, required: true },
});

// Model
const DonationData = mongoose.model("DonationData", donationDataSchema);

const activityLogSchema = new mongoose.Schema({
  user_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // Reference to User
  activity_type: { type: String, required: true }, // e.g., 'Donation Created', 'Profile Updated'
  timestamp: { type: Date, default: Date.now }, // Time of the activity
  metadata: { type: Object }, // Additional information about the activity
});

// Model
const ActivityLog = mongoose.model("ActivityLog", activityLogSchema);

const chatSchema = new mongoose.Schema({
  sender_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // Sender reference
  receiver_id: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true }, // Receiver reference
  message: { type: String, required: true }, // Chat message content
  timestamp: { type: Date, default: Date.now }, // When the message was sent
  status: {
    type: String,
    enum: ["Sent", "Delivered", "Read"], // Status of the message
    default: "Sent",
  },
});

// Model
const Chat = mongoose.model("Chat", chatSchema);
